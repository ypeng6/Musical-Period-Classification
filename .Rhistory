source("./03c-naive-bayes.R")
source("./03d-vote.R")
source("./04-cross-validation.R")
source("./05-method-comparision.R")
source("./functions.R")
source("./feature-selection.R")
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=2, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
###### STAT 447 Project: Classical Music Historical Period Classification ######
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03a-random-forest.R")
source("./03b-multinomial-logit.R")
source("./03c-naive-bayes.R")
source("./03d-vote.R")
source("./04-cross-validation.R")
source("./05-method-comparision.R")
source("./functions.R")
source("./feature-selection.R")
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Set Seed ###
seed = 447
### Data Wrangling ###
data_wrangle(dat)
### Data Transformation ###
set.seed(seed)
data_transform(dat)
load('data/transformed_data.RData')
### Feature Selection ###
n = nrow(dat)
iperm = sample(n)
crossValidate_feature(Kfold=3, iperm, dat, seed)
load('output/select_features_fold1.RData')
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
###### STAT 447 Project: Classical Music Historical Period Classification ######
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03a-random-forest.R")
source("./03b-multinomial-logit.R")
source("./03c-naive-bayes.R")
source("./03d-vote.R")
source("./04-cross-validation.R")
source("./05-method-comparision.R")
source("./functions.R")
source("./feature-selection.R")
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Set Seed ###
seed = 447
### Data Wrangling ###
data_wrangle(dat)
### Data Transformation ###
set.seed(seed)
data_transform(dat)
load('data/transformed_data.RData')
### Feature Selection ###
n = nrow(dat)
iperm = sample(n)
crossValidate_feature(Kfold=3, iperm, dat, seed)
load('output/select_features_fold1.RData')
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
vote <- function(rf_output, multi_output, nb_output, holdo, k, Kfold) {
# Create a matrix with the classification results from each method
all_outputs <- matrix(c(rf_output, multi_output, nb_output), nrow=length(rf_output), ncol=3)
# Take the mode (most common element) of each row
majority_vote <- apply(all_outputs, 1, function(x) names(which.max(table(x))))
holdo$period <- gsub("ancient_medieval_renaissance", "A", holdo$period)
holdo$period <- gsub("baroque", "B", holdo$period)
holdo$period <- gsub("classical", "C", holdo$period)
holdo$period <- gsub("romantic", "R", holdo$period)
holdo$period <- gsub("twentiethcentury_modern", "M", holdo$period)
holdo_class <- holdo$period
total <- length(holdo_class)
### RF ###
correct_rf <- sum(rf_output == holdo_class)
accuracy_rf <- correct_rf / total
print(accuracy_rf)
### Multi ###
correct_multi <- sum(multi_output == holdo_class)
accuracy_multi <- correct_multi / total
print(accuracy_multi)
### NB ###
correct_nb <- sum(nb_output == holdo_class)
accuracy_nb <- correct_nb / total
print(accuracy_nb)
### Vote ###
correct_votes <- sum(majority_vote == holdo_class)
accuracy_votes <- correct_votes / total
print(accuracy_votes)
acc_matrix = matrix(0,Kfold,4)
acc_matrix[k,1] <- accuracy_rf
acc_matrix[k,2] <- accuracy_multi
acc_matrix[k,3] <- accuracy_nb
acc_matrix[k,4] <- accuracy_votes
colnames(acc_matrix) = c("RF", "Logit", "NB", "Vote")
rownames(acc_matrix) = paste0("Fold", 1:Kfold)
return(accuracy_votes)
}
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
vote <- function(rf_output, multi_output, nb_output, holdo, k, Kfold) {
# Create a matrix with the classification results from each method
all_outputs <- matrix(c(rf_output, multi_output, nb_output), nrow=length(rf_output), ncol=3)
# Take the mode (most common element) of each row
majority_vote <- apply(all_outputs, 1, function(x) names(which.max(table(x))))
holdo$period <- gsub("ancient_medieval_renaissance", "A", holdo$period)
holdo$period <- gsub("baroque", "B", holdo$period)
holdo$period <- gsub("classical", "C", holdo$period)
holdo$period <- gsub("romantic", "R", holdo$period)
holdo$period <- gsub("twentiethcentury_modern", "M", holdo$period)
holdo_class <- holdo$period
total <- length(holdo_class)
### RF ###
correct_rf <- sum(rf_output == holdo_class)
accuracy_rf <- correct_rf / total
### Multi ###
correct_multi <- sum(multi_output == holdo_class)
accuracy_multi <- correct_multi / total
print(accuracy_multi)
### NB ###
correct_nb <- sum(nb_output == holdo_class)
accuracy_nb <- correct_nb / total
### Vote ###
correct_votes <- sum(majority_vote == holdo_class)
accuracy_votes <- correct_votes / total
acc_matrix = matrix(0,Kfold,4)
acc_matrix[k,1] <- accuracy_rf
acc_matrix[k,2] <- accuracy_multi
acc_matrix[k,3] <- accuracy_nb
acc_matrix[k,4] <- accuracy_votes
colnames(acc_matrix) = c("RF", "Logit", "NB", "Vote")
rownames(acc_matrix) = paste0("Fold", 1:Kfold)
return(acc_matrix)
}
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
# Macro AUC Matrix
print(cv_result[[5]])
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03a-random-forest.R")
source("./03b-multinomial-logit.R")
source("./03c-naive-bayes.R")
source("./03d-vote.R")
source("./04-cross-validation.R")
source("./05-method-comparision.R")
source("./functions.R")
source("./feature-selection.R")
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
load('data/transformed_data.RData')
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03-feature-selection.R")
source("./04a-random-forest.R")
source("./04b-multinomial-logit.R")
source("./04c-naive-bayes.R")
source("./04d-vote.R")
source("./05-cross-validation.R")
source("./06-method-comparision.R")
source("./functions.R")
###### STAT 447 Project: Classical Music Historical Period Classification ######
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03-feature-selection.R")
source("./04a-random-forest.R")
source("./04b-multinomial-logit.R")
source("./04c-naive-bayes.R")
source("./04d-vote.R")
source("./05-cross-validation.R")
source("./06-method-comparision.R")
source("./functions.R")
### Set Seed ###
seed = 447
### Data Loading ###
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Data Wrangling ###
data_wrangle(dat)
### Data Transformation ###
set.seed(seed)
data_transform(dat)
load('data/transformed_data.RData')
### Feature Selection ###
n = nrow(dat)
iperm = sample(n)
crossValidate_feature(Kfold=3, iperm, dat, seed)
load('output/select_features_fold1.RData')
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
###### STAT 447 Project: Classical Music Historical Period Classification ######
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03-feature-selection.R")
source("./04a-random-forest.R")
source("./04b-multinomial-logit.R")
source("./04c-naive-bayes.R")
source("./04d-vote.R")
source("./05-cross-validation.R")
source("./06-method-comparision.R")
source("./functions.R")
### Set Seed ###
seed = 447
### Data Loading ###
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Data Wrangling ###
data_wrangle(dat)
### Data Transformation ###
set.seed(seed)
data_transform(dat)
load('data/transformed_data.RData')
### Feature Selection ###
n = nrow(dat)
iperm = sample(n)
crossValidate_feature(Kfold=3, iperm, dat, seed)
load('output/select_features_fold1.RData')
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
###### STAT 447 Project: Classical Music Historical Period Classification ######
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03-feature-selection.R")
source("./04a-random-forest.R")
source("./04b-multinomial-logit.R")
source("./04c-naive-bayes.R")
source("./04d-vote.R")
source("./05-cross-validation.R")
source("./06-method-comparision.R")
source("./functions.R")
### Set Seed ###
seed = 447
### Data Loading ###
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Data Wrangling ###
data_wrangle(dat)
### Data Transformation ###
set.seed(seed)
data_transform(dat)
load('data/transformed_data.RData')
### Feature Selection ###
n = nrow(dat)
iperm = sample(n)
crossValidate_feature(Kfold=3, iperm, dat, seed)
load('output/select_features_fold1.RData')
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
###### STAT 447 Project: Classical Music Historical Period Classification ######
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03-feature-selection.R")
source("./04a-random-forest.R")
source("./04b-multinomial-logit.R")
source("./04c-naive-bayes.R")
source("./04d-vote.R")
source("./05-cross-validation.R")
source("./06-method-comparision.R")
source("./functions.R")
### Set Seed ###
seed = 447
### Data Loading ###
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Data Wrangling ###
data_wrangle(dat)
### Data Transformation ###
set.seed(seed)
data_transform(dat)
load('data/transformed_data.RData')
### Feature Selection ###
n = nrow(dat)
iperm = sample(n)
crossValidate_feature(Kfold=3, iperm, dat, seed)
load('output/select_features_fold1.RData')
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
###### STAT 447 Project: Classical Music Historical Period Classification ######
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03-feature-selection.R")
source("./04a-random-forest.R")
source("./04b-multinomial-logit.R")
source("./04c-naive-bayes.R")
source("./04d-vote.R")
source("./05-cross-validation.R")
source("./06-method-comparision.R")
source("./functions.R")
### Set Seed ###
seed = 447
### Data Loading ###
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Data Wrangling ###
data_wrangle(dat)
### Data Transformation ###
set.seed(seed)
data_transform(dat)
load('data/transformed_data.RData')
### Feature Selection ###
n = nrow(dat)
iperm = sample(n)
crossValidate_feature(Kfold=3, iperm, dat, seed)
load('output/select_features_fold1.RData')
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
cv_result
sum_columns_with_letter <- function(data, letter) {
# find column names containing the given letter
columns_with_letter <- grep(letter, colnames(data), value=TRUE)
# use rowSums to sum only the selected columns
row_sums <- rowSums(data[, columns_with_letter])
# return the row sums as a vector
return(row_sums)
}
### Method Comparison ###
method_compare(cv_result)
sum_columns_with_letter <- function(data, letter) {
# find column names containing the given letter
columns_with_letter <- grep(letter, colnames(data), value=TRUE)
# use rowSums to sum only the selected columns
row_sums <- rowSums(data[, columns_with_letter])
# return the row sums as a vector
return(row_sums)
}
sum_columns_with_letter(rf_tables_fold1[[1]],'A')
rf_tables_fold1
### Method Comparison ###
method_compare(cv_result)
rf_tables_fold1 <- rf_tables
# Random Forest PI
load("output/rf_tables_fold1.RData")
rf_tables_fold1 <- rf_tables
sum_columns_with_letter(rf_tables_fold1[[1]], 'A')
sum_columns_with_letter(rf_tables_fold1[[2]], 'A')
# Random Forest PI
load("output/rf_tables_fold1.RData")
rf_tables_fold1 <- rf_tables
load("output/rf_tables_fold2.RData")
rf_tables_fold2 <- rf_tables
load("output/rf_tables_fold3.RData")
rf_tables_fold3 <- rf_tables
# Multi Logit PI
load("output/logit_tables_fold1.RData")
logit_tables_fold1 <- logit_tables
load("output/logit_tables_fold2.RData")
logit_tables_fold2 <- logit_tables
load("output/logit_tables_fold3.RData")
logit_tables_fold3 <- logit_tables
# Navie Bayes PI
load("output/nb_tables_fold1.RData")
nb_tables_fold1 <- nb_tables
load("output/nb_tables_fold2.RData")
nb_tables_fold2 <- nb_tables
load("output/nb_tables_fold3.RData")
nb_tables_fold3 <- nb_tables
sum_columns_with_letter(rf_tables_fold1[[1]], 'A')
sum_columns_with_letter(rf_tables_fold1[[2]], 'A')
sum_columns_with_letter(rf_tables_fold2[[1]], 'A')
sum_columns_with_letter(rf_tables_fold2[[2]], 'A')
sum_columns_with_letter(rf_tables_fold3[[2]], 'A')
sum_columns_with_letter(rf_tables_fold3[[1]], 'A')
sum_columns_with_letter(rf_tables_fold1[[1]], 'B')
sum_columns_with_letter(rf_tables_fold1[[2]], 'B')
sum_columns_with_letter(rf_tables_fold2[[1]], 'B')
sum_columns_with_letter(rf_tables_fold2[[2]], 'B')
sum_columns_with_letter(rf_tables_fold3[[1]], 'B')
sum_columns_with_letter(rf_tables_fold3[[2]], 'B')
sum_columns_with_letter(rf_tables_fold1[[1]], 'C')
sum_columns_with_letter(rf_tables_fold1[[2]], 'C')
sum_columns_with_letter(rf_tables_fold2[[1]], 'C')
sum_columns_with_letter(rf_tables_fold2[[2]], 'C')
sum_columns_with_letter(rf_tables_fold3[[2]], 'C')
sum_columns_with_letter(rf_tables_fold3[[1]], 'C')
sum_columns_with_letter(rf_tables_fold1[[1]], 'R')
sum_columns_with_letter(rf_tables_fold1[[2]], 'R')
sum_columns_with_letter(rf_tables_fold2[[1]], 'R')
sum_columns_with_letter(rf_tables_fold2[[2]], 'R')
sum_columns_with_letter(rf_tables_fold3[[1]], 'R')
sum_columns_with_letter(rf_tables_fold3[[2]], 'R')
sum_columns_with_letter(rf_tables_fold3[[1]], 'M')
sum_columns_with_letter(rf_tables_fold3[[2]], 'M')
sum_columns_with_letter(rf_tables_fold2[[1]], 'M')
sum_columns_with_letter(rf_tables_fold2[[2]], 'M')
sum_columns_with_letter(rf_tables_fold1[[2]], 'M')
sum_columns_with_letter(rf_tables_fold1[[1]], 'M')
sum_columns_with_letter(rf_tables_fold1[[1]], 'M')
sum_columns_with_letter(logit_tables_fold1[[1]], 'A')
sum_columns_with_letter(logit_tables_fold1[[1]], 'A')
cv_result[[1]]
sum_columns_with_letter(logit_tables_fold2[[1]], 'A')
sum_columns_with_letter(logit_tables_fold3[[1]], 'M')
cv_result[[1]]
###### STAT 447 Project: Classical Music Historical Period Classification ######
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03-feature-selection.R")
source("./04a-random-forest.R")
source("./04b-multinomial-logit.R")
source("./04c-naive-bayes.R")
source("./04d-vote.R")
source("./05-cross-validation.R")
source("./06-method-comparision.R")
source("./functions.R")
### Set Seed ###
seed = 447
### Data Loading ###
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Data Wrangling ###
data_wrangle(dat)
### Data Transformation ###
set.seed(seed)
data_transform(dat)
load('data/transformed_data.RData')
### Feature Selection ###
n = nrow(dat)
iperm = sample(n)
crossValidate_feature(Kfold=3, iperm, dat, seed)
load('output/select_features_fold1.RData')
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
warnings()
###### STAT 447 Project: Classical Music Historical Period Classification ######
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03-feature-selection.R")
source("./04a-random-forest.R")
source("./04b-multinomial-logit.R")
source("./04c-naive-bayes.R")
source("./04d-vote.R")
source("./05-cross-validation.R")
source("./06-method-comparision.R")
source("./functions.R")
### Set Seed ###
seed = 447
### Data Loading ###
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Data Wrangling ###
data_wrangle(dat)
### Data Transformation ###
set.seed(seed)
data_transform(dat)
### Data Loading ###
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Data Wrangling ###
data_wrangle(dat)
###### STAT 447 Project: Classical Music Historical Period Classification ######
### Source Import ###
source("./01-data-wrangling.R")
source("./02-data-transform.R")
source("./03-feature-selection.R")
source("./04a-random-forest.R")
source("./04b-multinomial-logit.R")
source("./04c-naive-bayes.R")
source("./04d-vote.R")
source("./05-cross-validation.R")
source("./06-method-comparision.R")
source("./functions.R")
### Set Seed ###
seed = 447
### Data Loading ###
dat <- read.csv("data/spotifyclassical_composerbirthperiod.csv")
### Data Wrangling ###
data_wrangle(dat)
### Data Transformation ###
set.seed(seed)
data_transform(dat)
load('data/transformed_data.RData')
### Feature Selection ###
n = nrow(dat)
iperm = sample(n)
crossValidate_feature(Kfold=3, iperm, dat, seed)
load('output/select_features_fold1.RData')
### Method & Cross Validation ###
cv_result = crossValidate(Kfold=3, iperm, dat, nperfMeas=6, seed, selected_features)
### Method Comparison ###
method_compare(cv_result)
